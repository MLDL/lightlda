#include "wtime.h"
#include <stdio.h>
#include <stdint.h>
//#include <winsock2.h>
#include "misc.h"

namespace petuum {

	/*
	* Copyright (c) 2011, Dongsheng Song <songdongsheng@live.cn>
	*
	* Licensed to the Apache Software Foundation (ASF) under one or more
	* contributor license agreements.  See the NOTICE file distributed with
	* this work for additional information regarding copyright ownership.
	* The ASF licenses this file to You under the Apache License, Version 2.0
	* (the "License"); you may not use this file except in compliance with
	* the License.  You may obtain a copy of the License at
	*
	*     http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
	*/

	/**
	* @file nanosleep.c
	* @brief Implementation Code of POSIX Time Routines
	*/




	/**
	* Sleep for the specified time.
	* @param  request The desired amount of time to sleep.
	* @param  remain The remain amount of time to sleep.
	* @return If the function succeeds, the return value is 0.
	*         If the function fails, the return value is -1,
	*         with errno set to indicate the error.
	*/
	int nanosleep(const struct timespec *request, struct timespec *remain)
	{
		unsigned long ms, rc = 0;
		unsigned __int64 u64, want, real;

		union
		{
			unsigned __int64 ns100;
			FILETIME ft;
		}  _start, _end;

		if (request->tv_sec < 0 || request->tv_nsec < 0 || request->tv_nsec >= POW10_9)
		{
			errno = EINVAL;
			return -1;
		}

		if (remain != NULL) GetSystemTimeAsFileTime(&_start.ft);

		want = u64 = request->tv_sec * POW10_3 + request->tv_nsec / POW10_6;
		while (u64 > 0 && rc == 0)
		{
			if (u64 >= MAX_SLEEP_IN_MS) ms = MAX_SLEEP_IN_MS;
			else ms = (unsigned long)u64;

			u64 -= ms;
			rc = SleepEx(ms, TRUE);
		}

		if (rc != 0)
		{ /* WAIT_IO_COMPLETION (192) */
			if (remain != NULL)
			{
				GetSystemTimeAsFileTime(&_end.ft);
				real = (_end.ns100 - _start.ns100) / POW10_4;

				if (real >= want) u64 = 0;
				else u64 = want - real;

				remain->tv_sec = u64 / POW10_3;
				remain->tv_nsec = (long)(u64 % POW10_3) * POW10_6;
			}

			errno = EINTR;
			return -1;
		}

		return 0;
	}

	LARGE_INTEGER
		getFILETIMEoffset()
	{
			SYSTEMTIME s;
			FILETIME f;
			LARGE_INTEGER t;

			s.wYear = 1970;
			s.wMonth = 1;
			s.wDay = 1;
			s.wHour = 0;
			s.wMinute = 0;
			s.wSecond = 0;
			s.wMilliseconds = 0;
			SystemTimeToFileTime(&s, &f);
			t.QuadPart = f.dwHighDateTime;
			t.QuadPart <<= 32;
			t.QuadPart |= f.dwLowDateTime;
			return (t);
		}
	// nanoseconds
	//int clock_gettime(int X, struct timeval *tv)
	int clock_gettime(int X, struct timespec *tv)
	{
		LARGE_INTEGER           t;
		FILETIME            f;
		double                  microseconds;
		static LARGE_INTEGER    offset;
		static double           frequencyToMicroseconds;
		static int              initialized = 0;
		static BOOL             usePerformanceCounter = 0;

		if (!initialized)
		{
			LARGE_INTEGER performanceFrequency;
			initialized = 1;
			usePerformanceCounter = QueryPerformanceFrequency(&performanceFrequency);
			if (usePerformanceCounter)
			{
				QueryPerformanceCounter(&offset);
				frequencyToMicroseconds = (double)performanceFrequency.QuadPart / 1000000.;
			}
			else
			{
				offset = getFILETIMEoffset();
				frequencyToMicroseconds = 10.;
			}
		}
		if (usePerformanceCounter) QueryPerformanceCounter(&t);
		else
		{
			GetSystemTimeAsFileTime(&f);
			t.QuadPart = f.dwHighDateTime;
			t.QuadPart <<= 32;
			t.QuadPart |= f.dwLowDateTime;
		}

		t.QuadPart -= offset.QuadPart;
		microseconds = (double)t.QuadPart / frequencyToMicroseconds;
		t.QuadPart = microseconds;
		tv->tv_sec = t.QuadPart / 1000000;
		//tv->tv_usec = t.QuadPart % 1000000;
		tv->tv_nsec = (t.QuadPart % 1000000) * 1000;
		return (0);
	}
}